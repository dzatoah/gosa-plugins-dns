<?php

class goMailServer extends plugin{
	
  var $cli_summary      = "This pluign is used within the ServerService Pluign \nand indicates that this server supports mailqueue listings and so on.";
  var $cli_description  = "Some longer text\nfor help";
  var $cli_parameters   = array("eins" => "Eins ist toll", "zwei" => "Zwei ist noch besser");

  /* This plugin only writes its objectClass */
  var $objectclasses    = array("goMailServer");
  
  /* This class can't be assigned twice so it conflicts with itsself */
  var $conflicts        = array("goMailServer");

  var $DisplayName      = "";
  var $dn               = NULL;
  var $StatusFlag       = "goMailServerStatus";
  var $attributes       = array("goMailServerStatus","description","goMailServerStatus","postfixHeaderSizeLimit",
                                "postfixMailboxSizeLimit","postfixMessageSizeLimit",
                                "postfixMydestinations","postfixMydomain","postfixMyhostname",
                                "postfixMynetworks","postfixRelayhost","postfixTransportTable",
                                "postfixSenderRestrictions","postfixRecipientRestrictions");

  var $goMailServerStatus
  var $postfixHeaderSizeLimit
  var $postfixMailboxSizeLimit
  var $postfixMessageSizeLimit
  var $postfixMydestinations
  var $postfixMydomain
  var $postfixMyhostname
  var $postfixMynetworks
  var $postfixRelayhost
  var $postfixTransportTable
  var $postfixSenderRestrictions
  var $postfixRecipientRestrictions 

 
  function goMailServer($config,$dn)
  {
    plugin::plugin($config,$dn);
    $this->DisplayName = _("Flag server as mail server.");
    $this->is_account = true;
  }

  function execute()
  { 
    /* this class can't be executed- It represents only a flag */
    return;
  }

  function getListEntry()
  {
    $flag = $this->StatusFlag;
    $fields['Status']     = $this->$flag;
    $fields['Message']    = _("Flag server as mail server");
    $fields['AllowStart'] = true;
    $fields['AllowStop']  = true;
    $fields['AllowReset'] = true;
    $fields['AllowRemove']= true;
    $fields['AllowEdit']  = true;
    return($fields);
  }

  function remove_from_parent()
  {
    plugin::remove_from_parent();
    /* Check if this is a new entry ... add/modify */
    $ldap = $this->config->get_ldap_link();
    $ldap->cat($this->dn,array("objectClass"));
    if($ldap->count()){
      $ldap->cd($this->dn);
      $ldap->modify($this->attrs);
    }else{
      $ldap->cd($this->dn);
      $ldap->add($this->attrs);
    }
    show_ldap_error($ldap->get_error());
  }

  function save()
  {
    plugin::save();
    /* Check if this is a new entry ... add/modify */
    $ldap = $this->config->get_ldap_link();
    $ldap->cat($this->dn,array("objectClass"));
    if($ldap->count()){
      $ldap->cd($this->dn);
      $ldap->modify($this->attrs);
    }else{
      $ldap->cd($this->dn);
      $ldap->add($this->attrs);
    }
    show_ldap_error($ldap->get_error());
  }


   /* Directly save new status flag */
  function setStatus($value)
  {
    $ldap = $this->config->get_ldap_link();
    $ldap->cd($this->dn);
    $ldap->cat($this->dn,array("objectClass"));

    if($ldap->count()){
      $attrs =array();
      $tmp = $ldap->fetch();
      for($i = 0; $i < $tmp['objectClass']['count']; $i ++){
        $attrs['objectClass'][] = $tmp['objectClass'][$i];
      }
      $flag = $this->StatusFlag;
      $attrs[$flag] = $value;
      $this->$flag = $value;
      $ldap->modify($attrs);
      show_ldap_error($ldap->get_error());
    }
  }


  function check(){ return array();}
  function save_object()
  {
    plugin::save_object();  
  }
}
// vim:tabstop=2:expandtab:shiftwidth=2:filetype=php:syntax:ruler:
?>
